import pandas as pd
import numpy as np
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
import matplotlib.pyplot as plt
import seaborn as sns

# Data Loading and Preprocessing
def load_transaction_data():
    """Load sample transaction data"""
    transactions = pd.DataFrame({
        'customer_id': range(1000),
        'visit_frequency': np.random.normal(10, 3, 1000),
        'avg_order_value': np.random.normal(7, 2, 1000),
        'digital_engagement': np.random.uniform(0, 1, 1000),
        'loyalty_points': np.random.normal(500, 150, 1000)
    })
    return transactions

# Customer Segmentation Analysis
class CustomerSegmentation:
    def __init__(self, data):
        self.data = data
        self.scaler = StandardScaler()
        
    def preprocess_features(self):
        features = ['visit_frequency', 'avg_order_value', 
                   'digital_engagement', 'loyalty_points']
        X = self.data[features]
        return self.scaler.fit_transform(X)
    
    def segment_customers(self, n_clusters=4):
        X = self.preprocess_features()
        kmeans = KMeans(n_clusters=n_clusters, random_state=42)
        self.data['segment'] = kmeans.fit_predict(X)
        return self.data
    
    def analyze_segments(self):
        segment_stats = self.data.groupby('segment').agg({
            'visit_frequency': 'mean',
            'avg_order_value': 'mean',
            'digital_engagement': 'mean',
            'loyalty_points': 'mean'
        })
        return segment_stats

# Store Performance Analysis
class StoreAnalytics:
    def __init__(self):
        self.store_data = pd.DataFrame({
            'store_id': range(100),
            'revenue': np.random.normal(10000, 2000, 100),
            'transactions': np.random.normal(500, 100, 100),
            'staff_hours': np.random.normal(80, 10, 100),
            'customer_satisfaction': np.random.normal(4.2, 0.3, 100)
        })
    
    def calculate_kpis(self):
        kpis = pd.DataFrame()
        kpis['revenue_per_hour'] = self.store_data['revenue'] / self.store_data['staff_hours']
        kpis['trans_per_hour'] = self.store_data['transactions'] / self.store_data['staff_hours']
        kpis['avg_transaction'] = self.store_data['revenue'] / self.store_data['transactions']
        return kpis
    
    def visualize_performance(self):
        kpis = self.calculate_kpis()
        plt.figure(figsize=(10, 6))
        sns.scatterplot(data=kpis, x='trans_per_hour', y='revenue_per_hour')
        plt.title('Store Performance Analysis')
        plt.xlabel('Transactions per Hour')
        plt.ylabel('Revenue per Hour')
        plt.savefig('store_performance.png')
        plt.close()

# Inventory Optimization
def optimize_inventory(sales_data, lead_time):
    """Calculate optimal inventory levels"""
    daily_demand = sales_data.mean()
    demand_stddev = sales_data.std()
    safety_stock = demand_stddev * 1.96 * np.sqrt(lead_time)
    reorder_point = daily_demand * lead_time + safety_stock
    return {
        'daily_demand': daily_demand,
        'safety_stock': safety_stock,
        'reorder_point': reorder_point
    }

# Main Analysis Execution
if __name__ == "__main__":
    # Customer Analysis
    transaction_data = load_transaction_data()
    segmentation = CustomerSegmentation(transaction_data)
    segmented_customers = segmentation.segment_customers()
    segment_analysis = segmentation.analyze_segments()
    
    # Store Analysis
    store_analytics = StoreAnalytics()
    store_kpis = store_analytics.calculate_kpis()
    store_analytics.visualize_performance()
    
    # Save Results
    segment_analysis.to_csv('customer_segments.csv')
    store_kpis.to_csv('store_performance.csv')

# Results can be accessed at:
# - Customer Segmentation Results: customer_segments.csv
# - Store Performance Analysis: store_performance.csv
# - Visualization: store_performance.png
